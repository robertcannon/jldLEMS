<Lems>

<Target component="simset"/> 
  
	<Dimension name="length" l="1" />
	<Dimension name="time" t="1" />
	<Unit symbol="ms" dimension="time" power="-3" />
	<Unit symbol="um" dimension="length" power="-6" />


	<ComponentType name="GridPoint"/>


	<ComponentType name="GridPoint1D" extends="GridPoint">
		<Property name="position" dimension="length" />
	</ComponentType>


	<ComponentType name="Grid"/>


	<ComponentType name="PosGrid1D" extends="Grid">
		<Parameter name="min" dimension="length" />
		<Parameter name="max" dimension="length" />
		<Parameter name="step" dimension="length" />
		<DerivedParameter name="n" dimension="none"
			value="(max - min) / step" />
		<Text name="quantity" />

		<Structure>
				<MultiInstance componentType="GridPoint1D"
					number="n">
					<Assign property="position" value="min + step * index"
						exposeAs="quantity" />
				</MultiInstance>
		</Structure>
		 
	</ComponentType>


	<ComponentType name="GridPoint2D" extends="GridPoint">
		<Property name="xpos" dimension="length" />
		<Property name="ypos" dimension="length" />
	</ComponentType>




	<ComponentType name="Group">
		<ComponentTypeReference name="of" />
		<PathParameter name="select" />
		<Collection name="elements" />
		<Structure>
			<Gather pathParameter="select" collection="elements" />
		</Structure>
	</ComponentType>




	<ComponentType name="GridBasedNetwork">
		<Children type="Grid" />
		<Children type="Group" />
		<Children type="Population" />
		<Children type="FromToConnections" />
	</ComponentType>


        <ComponentType name="spikeGenerator">
            <Parameter name="period" dimension="time"/>
            <SendPort name="a"/>
            <Exposure name="tsince" dimension="time"/>
            <Dynamics>
                <StateVariable name="tsince" exposure="tsince" dimension="time"/>
                <TimeDerivative variable="tsince" value="1"/>
                <OnCondition test="tsince .gt. period">
                    <StateAssignment variable="tsince" value="0"/>
                    <EventOut port="a"/>
                </OnCondition>
            </Dynamics>
        </ComponentType>

	<ComponentType name="Cell">
		<ReceivePort name="spikes-in"/>
		<SendPort name="spikes-out"/>

                <Exposure name="n" dimension="none" />

		<Dynamics>
			<StateVariable name="n" exposure="n" dimension="none" />
			<OnEvent port="spikes-in">
				<StateAssignment variable="n" value="n + 1" />
			</OnEvent>

			<OnCondition test="n .eq. 100">
				<EventOut port="spikes-out" />
			</OnCondition>
		</Dynamics>

	</ComponentType>



	<ComponentType name="Population">
		<Child name="component" type="Component" />

	</ComponentType>


	<ComponentType name="PointBasedPopulation" extends="Population">
		<Child local="true" type="Group" name="points" />

		<Structure>
			<CoInstantiate at="points" component="component" />
		</Structure>
	</ComponentType>



	<ComponentType name="PairSelector">
		<PairCollection name="pairs" />
	</ComponentType>


	<ComponentType name="FromToConnections">
		<Children name="selectors" type="PairSelector" />
		<Child local="true" name="from" type="Population" />
		<Child local="true" name="to" type="Population" />
		<Structure>
				<Apply components="selectors">
					<PairsEventConnection pairs="pairs" />
				</Apply>
		</Structure>
	</ComponentType>



	<ComponentType name="BoxCarSelector" extends="PairSelector">
		<Parameter name="range" dimension="length" />
		<Text name="fromQuantity" />
		<Text name="toQuantity" />

		<Structure>
				<GatherPairs collection="pairs" pFrom="../from" qFrom="../to">
					<PairFilter select="x[abs(p:fromQuantity - q:toQuantity) .lt. range]" />
				</GatherPairs>
		</Structure>

	</ComponentType>




	<ComponentType name="RandomPairs" extends="PairSelector">
		<Parameter name="probability" dimension="none" />
		<Structure>
			<ForEach instances="../from" as="src">
					<ForEach instances="../to" as="tgt">
						<If test="random() .lt. prob">
							<IncludePair collection="pairs" />
						</If>
					</ForEach>
				</ForEach>
		</Structure>
	</ComponentType>


	<Cell id="excit_cell"/>



	<spikeGenerator id="inhib_cell" period="10ms"/>


	<Component type="GridBasedNetwork" id="net1">
		<PosGrid1D id="line" min="0um" max="20um" step="2um"
			quantity="distance" />

		<Group of="GridPoint" id="ipoints" select="line[index % 5 .eq. 0]" />
		<Group of="GridPoint" id="epoints" select="line .minus. ipoints" />

		<PointBasedPopulation id="pe" component="excit_cell"
			points="epoints" />
		<PointBasedPopulation id="pi" component="inhib_cell"
			points="ipoints" />

		<Group of="Cell" id="all" select="pe .or. pi" />


		<FromToConnections id="proj1" from="pi" to="pe">
			<BoxCarSelector range="5um" fromQuantity="distance"
				toQuantity="distance" />
		</FromToConnections>

	</Component>



	<Include file="MultiRunSimulation.xml" />
 


<SimulationSet id="simset">
	<Display id="disp1" title="Net1" xmin="0" xmax="80" ymin="-80" ymax="50"/>
	
    <Simulation id="sim1" length="200ms" step="0.05ms" target="net1" display="disp1">
		<DisplayList timeScale="1ms" title="Network example: excitatory cells">
              <Line id="ve0"  timeScale="1ms" quantity="pe[0]/n" scale="1" color="#0000f0"/>
              <Line id="ve1"  timeScale="1ms" quantity="pe[1]/n" scale="1" color="#00f0f0"/>
              <Line id="ve2"  timeScale="1ms" quantity="pe[2]/n" scale="1" color="#f0f0f0"/>
              <Line id="vi0"  timeScale="1ms" quantity="pi[0]/tsince" scale="1ms" color="#0000f0"/>
              <Line id="vi1"  timeScale="1ms" quantity="pi[1]/tsince" scale="1ms" color="#00f0f0"/>
		</DisplayList>
	</Simulation>
</SimulationSet>

</Lems>